{"ast":null,"code":"import { UserProvider } from '../auth/UserProvider.js';\n\nfunction getUserToken() {\n  return UserProvider;\n}\n\nexport async function handleResponse(response, isBlob = false) {\n  let result;\n\n  if (isBlob) {\n    result = await response.blob();\n  } else {\n    result = handleResult(await response.text());\n  }\n\n  if (response.ok) {\n    return result;\n  } // handle error\n\n\n  return Promise.reject({\n    code: response.status,\n    message: result && result.message ? result.message : response.statusText\n  });\n}\nexport async function doGet(url, token) {\n  const response = await fetch(url, {\n    method: 'GET',\n    headers: {\n      'Authorization': 'Bearer ' + token\n    }\n  });\n  return await handleResponse(response);\n}\nexport async function doPost(url, data) {\n  console.debug('Request data:', data);\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data)\n  });\n  return await handleResponse(response);\n}\nexport async function doPostFile(url, data, token) {\n  console.log(getUserToken());\n  console.debug('Request data:', data);\n  const response = await fetch(url, {\n    method: 'POST',\n    headers: {\n      'Authorization': 'Bearer ' + token\n    },\n    body: data\n  });\n  return await handleResponse(response);\n}\n\nfunction handleResult(value) {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    return value;\n  }\n}","map":{"version":3,"sources":["C:/Users/albie/Documents/UVIC/UVIC/seng426/Project/vega-web-master/src/service/BaseAPI.js"],"names":["UserProvider","getUserToken","handleResponse","response","isBlob","result","blob","handleResult","text","ok","Promise","reject","code","status","message","statusText","doGet","url","token","fetch","method","headers","doPost","data","console","debug","body","JSON","stringify","doPostFile","log","value","parse","error"],"mappings":"AAAA,SAAQA,YAAR,QAA2B,yBAA3B;;AAEA,SAASC,YAAT,GAAuB;AACrB,SAAOD,YAAP;AACD;;AAED,OAAO,eAAeE,cAAf,CAA8BC,QAA9B,EAAwCC,MAAM,GAAG,KAAjD,EAAwD;AAC7D,MAAIC,MAAJ;;AACA,MAAID,MAAJ,EAAY;AACVC,IAAAA,MAAM,GAAG,MAAMF,QAAQ,CAACG,IAAT,EAAf;AACD,GAFD,MAEO;AACLD,IAAAA,MAAM,GAAGE,YAAY,CAAC,MAAMJ,QAAQ,CAACK,IAAT,EAAP,CAArB;AACD;;AACD,MAAIL,QAAQ,CAACM,EAAb,EAAiB;AACf,WAAOJ,MAAP;AACD,GAT4D,CAU7D;;;AACA,SAAOK,OAAO,CAACC,MAAR,CAAe;AACpBC,IAAAA,IAAI,EAAET,QAAQ,CAACU,MADK;AAEpBC,IAAAA,OAAO,EAAET,MAAM,IAAIA,MAAM,CAACS,OAAjB,GAA2BT,MAAM,CAACS,OAAlC,GAA4CX,QAAQ,CAACY;AAF1C,GAAf,CAAP;AAID;AAED,OAAO,eAAeC,KAAf,CAAqBC,GAArB,EAA0BC,KAA1B,EAAiC;AACtC,QAAMf,QAAQ,GAAG,MAAMgB,KAAK,CAACF,GAAD,EAAM;AAChCG,IAAAA,MAAM,EAAE,KADwB;AAEhCC,IAAAA,OAAO,EAAC;AACN,uBAAgB,YAAUH;AADpB;AAFwB,GAAN,CAA5B;AAMA,SAAO,MAAMhB,cAAc,CAACC,QAAD,CAA3B;AACD;AAGD,OAAO,eAAemB,MAAf,CAAsBL,GAAtB,EAA2BM,IAA3B,EAAiC;AACtCC,EAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BF,IAA/B;AACA,QAAMpB,QAAQ,GAAG,MAAMgB,KAAK,CAACF,GAAD,EAAM;AAChCG,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAG;AACR,sBAAgB;AADR,KAFsB;AAKhCK,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAeL,IAAf;AAL0B,GAAN,CAA5B;AAOA,SAAO,MAAMrB,cAAc,CAACC,QAAD,CAA3B;AACD;AAED,OAAO,eAAe0B,UAAf,CAA0BZ,GAA1B,EAA+BM,IAA/B,EAAqCL,KAArC,EAA4C;AACjDM,EAAAA,OAAO,CAACM,GAAR,CAAY7B,YAAY,EAAxB;AACAuB,EAAAA,OAAO,CAACC,KAAR,CAAc,eAAd,EAA+BF,IAA/B;AACA,QAAMpB,QAAQ,GAAG,MAAMgB,KAAK,CAACF,GAAD,EAAM;AAChCG,IAAAA,MAAM,EAAE,MADwB;AAEhCC,IAAAA,OAAO,EAAC;AACN,uBAAgB,YAAUH;AADpB,KAFwB;AAKhCQ,IAAAA,IAAI,EAAEH;AAL0B,GAAN,CAA5B;AAQA,SAAO,MAAMrB,cAAc,CAACC,QAAD,CAA3B;AACD;;AAED,SAASI,YAAT,CAAsBwB,KAAtB,EAA6B;AAC3B,MAAI;AACF,WAAOJ,IAAI,CAACK,KAAL,CAAWD,KAAX,CAAP;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,WAAOF,KAAP;AACD;AACF","sourcesContent":["import {UserProvider} from '../auth/UserProvider.js';\n\nfunction getUserToken(){\n  return UserProvider;\n}\n\nexport async function handleResponse(response, isBlob = false) {\n  let result;\n  if (isBlob) {\n    result = await response.blob();\n  } else {\n    result = handleResult(await response.text());\n  }\n  if (response.ok) {\n    return result;\n  }\n  // handle error\n  return Promise.reject({\n    code: response.status,\n    message: result && result.message ? result.message : response.statusText\n  });\n}\n\nexport async function doGet(url, token) {\n  const response = await fetch(url, {\n    method: 'GET',\n    headers:{\n      'Authorization':'Bearer '+token\n    }\n  });\n  return await handleResponse(response);\n}\n\n\nexport async function doPost(url, data) {\n  console.debug('Request data:', data);\n  const response = await fetch(url, {\n    method: 'POST',\n    headers : {\n      \"Content-Type\": \"application/json\"\n    },\n    body: JSON.stringify(data),\n  });\n  return await handleResponse(response);\n}\n\nexport async function doPostFile(url, data, token) {\n  console.log(getUserToken());\n  console.debug('Request data:', data);\n  const response = await fetch(url, {\n    method: 'POST',\n    headers:{\n      'Authorization':'Bearer '+token\n    },\n    body: data\n  });\n\n  return await handleResponse(response);\n}\n\nfunction handleResult(value) {\n  try {\n    return JSON.parse(value);\n  } catch (error) {\n    return value;\n  }\n}"]},"metadata":{},"sourceType":"module"}